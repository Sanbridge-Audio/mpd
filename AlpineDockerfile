#Start dockerfile by creating all the dependencies needed.
FROM alpine AS mpdbuild 
LABEL maintainer="Matt Dickinson <matt@sanbridge.org>" 

#Set the working directory of the dockerfile at this stage.
ENV HOME /root

#Installation of MPD from alpine package.
RUN apk update  && apk add \
	alsa-lib-dev \
	g++ \
	libboost-dev \
	sqlite-dev \
	ffmpeg-dev \
#	mpd \
#	alsa-lib \
#        alsa-plugins-pulse \
        alsa-utils \
        libmpdclient \
        libpulse \
#        mpc \
	&& rm -rf /var/cache/apk/* /tmp/*
	
ENV PYTHONUNBUFFERED=1
RUN apk add --update --no-cache python3 && ln -sf python3 /usr/bin/python
RUN python3 -m ensurepip
#RUN pip3 install --no-cache --upgrade pip setuptools
#RUN pip3 install --user meson
RUN pip3 install meson

#Set the mpd version. Makes it easier to update in the future.
ARG MPD_MAJOR_VERSION=0.23 
ARG MPD_MINOR_VERSION=8


#Download the most recent MPD source file.
ADD https://www.musicpd.org/download/mpd/${MPD_MAJOR_VERSION}/mpd-${MPD_MAJOR_VERSION}.${MPD_MINOR_VERSION}.tar.xz /tmp
RUN tar -xf /tmp/mpd-${MPD_MAJOR_VERSION}.${MPD_MINOR_VERSION}.tar.xz -C /
#ADD https://www.musicpd.org/download/mpd/${MPD_MAJOR_VERSION}/mpd-${MPD_MAJOR_VERSION}.${MPD_MINOR_VERSION}.tar.xz /

#WORKDIR /home

#Change the working directory to MPD for installation.
WORKDIR mpd-${MPD_MAJOR_VERSION}.${MPD_MINOR_VERSION}

#Installation of MPD
RUN meson . output/release --buildtype=debugoptimized -Db_ndebug=true 
RUN ninja -C output/release
RUN ninja -C output/release install
ENV Version=${MPD_MAJOR_VERSION}.${MPD_MINOR_VERSION}


#RUN meson configure output/release

#RUN ninja -C output/release

RUN apk del \
	build-base \ 
	boost \
	ninja \
	boost-dev \
	meson \
	alsa-lib-dev \
	sqlite-dev \
	ffmpeg-dev

#Changing stage for the dockerfile to the configuration of MPD.
FROM mpdbuild AS config 

COPY --from=mpdbuild output/release/mpd /usr/bin/

#Set the s6 overlay version. Makes running mpd much easier. 
ARG S6_VERSION=2.2.0.3

#Download the most recent s6 overlay.
ADD https://github.com/just-containers/s6-overlay/releases/download/v2.2.0.3/s6-overlay-amd64.tar.gz /tmp
RUN tar xzf /tmp/s6-overlay-amd64.tar.gz -C /

#Make needed directories. Should match the config file.
RUN  mkdir -p /var/lib/mpd/music \
	&& mkdir -p ~/.mpd/playlists \
	&& mkdir -p ~/.config/mpd \
	&& chmod a+w ~/.mpd/playlists

#Create music, playlist, tmp (for sending audio to snapcast) and config folder.
VOLUME /var/lib/mpd/music /.mpd/playlists /tmp

#Creating databases.
RUN touch /.mpd/mpd.log \
	&& touch /.mpd/sticker.sql \
	&& touch /.mpd/pid \
	&& touch /.mpd/mpdstate \
	&& touch /.mpd/tag_cache

#Add permissions to created databases
RUN chmod 777 /.mpd/mpd.log \
	&& chmod 777 /.mpd/sticker.sql \
	&& chown 777 /.mpd/pid \
	&& chmod 777 /.mpd/mpdstate \
	&& chmod 777 /.mpd/tag_cache

#Copy preset configuration file into image from folder. 
COPY mpd.conf /usr/local/etc

#Add permissions so that the configuration file will actually work
#RUN chmod 777 /usr/local/etc/mpd.conf

#Copy a services file that will allow MPD to find the mpd.conf file. 
#COPY mpd.service /usr/local/lib/systemd/system 

#Copy stations playlist into mpd playlists folder that was created earlier.
COPY Stations.m3u /.mpd/playlists 

FROM config as mpd
ENV TZ="America/New_York"
#Consistent command across multiple types of mpd dockerfiles.
CMD ["mpd", "--stdout", "--no-daemon"]

ENTRYPOINT ["/init"]

#Exposing the port so that the container will send out it's information across the network. 
EXPOSE 6600


